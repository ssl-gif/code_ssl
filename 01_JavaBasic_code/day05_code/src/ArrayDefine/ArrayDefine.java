
/*

数组(array)就是一种容器，可以同时存放多个数据值。并且具有如下特点：
①. 数组是一种引用数据类型		②. 数组当中的多个数据，类型必须统一		③. 数组的长度在程序运行期间不可改变

1.数组的定义
(1).动态初始化数组：
            数据类型[] 数组名称 = new 数据类型[数组长度];
(2).静态初始化的标准格式：
            数据类型[] 数组名称 = new 数据类型[] { 元素1, 元素2, ... };
(3).静态初始化的省略格式：
            数据类型[] 数组名称 = { 元素1, 元素2, ... };

数据类型：也就是数组当中保存的数据，全都是统一的什么类型。可以是基本数据类型，也可以是引用数据类型中的String类型
数组名字：满足标识符的命名规则和规范(小驼峰式)，可以使用名字操作数组
new：创建数组使用的关键字，代表创建数组的动作

2.数组的访问
    每一个存储到数组的元素，都会自动的拥有一个编号，从0开始，依次为：0，1，2，3......，这个编号称为数组的索引。可以通过数组的
索引访问到数组中的元素。具体语法格式如下：（注意：索引值从0开始，一直到“数组的长度-1”为止）
                         数组名称[索引值];

#.注意事项：
①.
动态初始化（指定长度）：直接指定数组当中的数据元素个数，而没有指定具体的数据内容，数据内容可后续进行赋值
静态初始化（指定内容）：不直接指定数据个数多少，而是直接将具体的数据内容进行指定，可自动推算出来数组长度

②.
动态初始化可以拆分成为两个步骤：先定义一个数组，再指定数组长度
        int arrayA[];
        arrayA = new int[10];

静态初始化的标准格式，也可以拆分成为两个步骤：先定义一个数组，再指定数组内容
        int arrayB[];
        arrayB = new int[]{5, 10, 15, 20};

静态初始化的省略格式，不能拆分成为两个步骤
       int arrayC[];
       arrayC = {5, 10, 15, 20};

③.直接打印数组名称，得到的是数组对应的：内存地址哈希值。
int[] array = { 10, 20, 30 };
System.out.println(array);   // [I@75412c2f：[代表数组，I代表int类型，@代表后面的数字为十六进制

④.使用动态初始化数组的时候，数组当中的元素并未被赋值，但是有默认的值存储在数组里面。规则如下：

整数型(byte，short，int，long)                    0
浮点数型(float，double)                           0.0
字符型(char)                                     '\u0000'（不可见的字符）
布尔型(boolean)                                  false
引用类型(字符串，数组，类，接口，Lambda)            null

*静态初始化其实也有默认值的过程，只不过系统自动马上将默认值替换成为了大括号当中的具体数值。

⑤.数组的长度属性
    每个数组都具有长度，而且是固定的。Java中赋予了数组一个属性，可以获取到数组的长度，语句为： 数组名.length ，属性length的执行
结果是数组的长度，是一个int类型数字。由此可以推断出，数组的最大索引值为：数组名.length - 1

public static void main(String[] args) {
        int[] arrayB = {10, 20, 30, 3, 5, 4, 6, 7, 8, 8, 65, 4, 44, 6, 10, 3};
        int len = arrayB.length;   //数组的length属性的返回值是一个int类型的数字
        System.out.println("arrayB数组的长度是：" + len);
}

 */

package ArrayDefine;

public class ArrayDefine {
    public static void main(String[] args) {

        // ①.动态初始化：
        int[] array1 = new int[3];
        array1[0] = 5; array1[1] = 15; array1[2] = 25;
        String[] array2 = new String[3];
        array2[0] = "Hello"; array2[1] = "World"; array2[2] = "Java";

        // ②.静态初始化的标准格式：
        int[] array3 = new int[]{5, 15, 25};
        String[] array4 = new String[]{"Hello", "World", "Java"};

        // ③.静态初始化的省略格式：
        int[] array5 = {5, 15, 25};
        String[] array6 = {"Hello", "World", "Java"};

    }
}
