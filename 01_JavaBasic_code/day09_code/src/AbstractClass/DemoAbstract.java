
/*

    抽象类是没有具体对象的类，例如：动物类、图形类等，没有具体的对象，是一个抽象的概念，所以称为抽象类。只有方法声明，没有方法体
的方法称为抽象方法。如果一个类包含抽象方法，那么该类必须是抽象类，但是抽象类中不一定有抽象方法。未包含抽象方法的抽象类，目的就是
不想让调用者创建该类对象，通常用于某些特殊的类结构设计。

(1).抽象类不能创建对象，必须通过一个子类来继承抽象父类，通过创建该非抽象子类的对象，来使用抽象父类的内容。

(2).由于子类继承了抽象父类的抽象方法，但是子类并不是抽象类，却含有继承过来的抽象方法，那么该怎么办呢？
    所以子类必须覆盖重写抽象父类当中所有的抽象方法，除非该子类也是抽象类。此时相当于是子类将继承过来的父类抽象方法，给覆盖重写掉了。
可看成是子类当中已经不存在这些"从父类中继承过来的抽象方法了"，被子类方法替换掉了。
    此时方法的覆盖重写是子类对父类抽象方法方法体的完成实现，因此也叫做"方法实现"。

(3).抽象类中可以有构造方法，是供子类创建对象时，初始化父类成员使用的。因为在子类的构造方法中，有默认的super()调用，此时就会调用
抽象父类的构造方法，对抽象父类的成员进行初始化。

 */

package AbstractClass;

public class DemoAbstract {
    public static void main(String[] args) {

        // Animal animal = new Animal();  错误写法，不能创建抽象类对象

        Cat cat = new Cat();
        cat.eat();
        cat.normalMethod();

    }
}
