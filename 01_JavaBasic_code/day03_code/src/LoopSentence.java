
/*

循环结构的基本组成部分：
(1).初始化语句：在循环开始最初执行，而且只执行唯一一次。一般为初始化循环变量。
(2).条件判断语句：如果成立，则循环继续；如果不成立，则退出循环。
(3).循环体：要重复执行的代码，若干行语句。
(4).步进语句：每次循环结束之后都要执行一次。一般为更新循环变量使得条件判断不再成立，以此跳出循环。

1.for循环语句

            for(初始化语句; 条件判断语句; 步进语句){
                         循环体;
            }

2.while循环语句

a.标准格式：
            while (条件判断语句) {
                循环体;
            }

b.扩展格式：
            初始化语句;
            while (条件判断语句) {
                循环体;
                步进语句;
            }

3.do...while循环语句

a.标准格式：
            do {
                循环体;
            } while (条件判断语句);  //注意此时有个分号不能丢

b.扩展格式：
            初始化语句;
            do {
                循环体;
                步进语句;
            } while (条件判断语句);


#.注意事项：

①.如果条件判断语句；从来没有满足过，那么for循环和while循环将会执行0次，但是do...while循环会执行至少一次。

②.三种循环之间可以互相转换。即一个循环问题，我们可以使用三种不同的循环语句来解决。但是他们的应用场景有所差别：
a.for循环更适用于计次数的循环问题(已知循环次数的问题)
b.while和do...while循环更适用于判断条件的循环问题(循环次数未知的问题)
c.do...while循环更适用于先执行一次某段代码再进行循环判断的问题(do...while循环使用较少)

③.循环变量的作用域：
a.for循环的循环变量i在小括号当中定义，意味着该循环变量的作用域仅限于for循环内部，只有循环内部才可以使用该变量。(for循环结束，该变量就从内存中消失，能够提高内存的使用效率)
b.while和do...while循环的初始化语句本来就在循环外面，所以出来循环之后还可以继续使用。


4.循环控制语句break和continue

(1).break语句
a. 可以用在switch语句当中，一旦执行break，整个switch语句立刻结束，起到终止switch的作用。
b. 可以用在循环体语句当中，一旦执行break，整个循环语句立刻结束，起到跳出循环的作用。

(2).continue语句：一旦执行continue，则立刻跳过当前次循环剩余内容，马上开始下一次循环。

5.死循环与嵌套循环

(1).死循环：当循环中的条件判断语句永远为true，则会一直循环下去，就叫做死循环。死循环的常用标准格式如下：
                            while (true) {
                                循环体;
                            }

(2).嵌套循环
    是指一个循环的循环体内包含另一个循环。比如：for循环里面还有一个for循环(for循环的嵌套)、while循环里面还有一个while循环(while循
环的嵌套)、for循环里面还有一个while循环(for循环与while循环的嵌套)等等，就是嵌套循环。语法格式如下：(以for循环的嵌套为例)
                        for(初始化语句; 条件判断语句; 步进语句) {
                            for(初始化语句; 条件判断语句; 步进语句) {
                                        内循环体;
                            }
                        }
a.嵌套循环的执行特点是外循环执行一次，内循环执行多次。嵌套循环的循环次数 = 外循环次数 * 内循环次数。
b.上述所说的都是两个循环嵌套在一起，叫做双重嵌套循环。其实可以有多个循环嵌套在一起，叫做多重嵌套循环。多重嵌套循环总共的循环次数=
第一层循环次数 * 第二层循环次数 * 第三层循环次数*...

 */

public class LoopSentence {
    public static void main(String[] args) {

        // 计算1-100之间的偶数和

        // ①.for循环实现：
        int sum1 = 0;
        for (int i = 1; i <= 100; i++) {
            if (i % 2 == 0) {
                sum1 += i;
            }
        }
        System.out.println("1‐100之间的偶数和是：" + sum1);

        // ②.while循环实现：
        int sum2 = 0;
        int i = 1;
        while (i <= 100) {
            if (i % 2 == 0) {
                sum2 += i;
            }
            i++;
        }
        System.out.println("1‐100之间的偶数和是：" + sum2);

        // ③.do...while循环实现：
        int sum3 = 0;
        int j = 1;
        do {
            if (j % 2 == 0) {
                sum3 += j;
            }
            j++;
        } while (j <= 100);
        System.out.println("1‐100之间的偶数和是：" + sum3);

    }
}
