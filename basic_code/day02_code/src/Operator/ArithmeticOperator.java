
/*

算术运算符：由算术运算符连接的表达式称为算术表达式，返回值是一个常量。

(1).加法运算符+：
①.+号的两侧均为数值时，就表示数学运算。
②.+号的两侧只要有一侧是字符串，就表示字符串拼接。

public static void main(String[] args) {

        // a.如果是字符串和常量相加，则直接拼接常量的值
        System.out.println("5+5=" + 5 + 5); // 5+5=55

        // b.如果是字符串和变量相加，则拼接的是变量存储的数据值，而不是变量本身
        int y = 10;
        System.out.println("结果是：" + y);  // 结果是：10

    }

(2).减法运算符-

(3).乘法运算符*

(4).除法运算符/：两个整数型数据相除时，表示取整。至少有一方是浮点数时，才表示除法。

(5).取模运算符%：获得两数相除的余数。只有两个整数进行取模运算才有意义，浮点数进行取模运算毫无意义。

(6).自增运算符++和自减运算符-- ：自增运算符++可以让变量加1，自减运算符--可以让变量减1。写在变量名称之前，++num，称为前++；写在变量名称之后，num++，称为后++。

a.单独使用：不和其他任何操作混合，自己独立使用。在单独使用的时候，前++和后++没有任何区别。也就是：++num和num++是完全一样的效果。
b.混合使用：和其他操作混合使用，例如与打印操作混合、与赋值操作混合等。在混合使用的时候，前++和后++有重大区别。
           如果是前++，则变量立刻+1，然后拿着加1后的数值去参与其他操作。	   [先加后用]
           如果是后++，则先使用变量本来的数值去参与其他操作，最后再让变量+1。[先用后加]
*由此可知：无论是前++还是后++，变量最终的结果均会加1。只不过变量拿去参与混合运算的数值有所不同。

 */
package Operator;

public class ArithmeticOperator {
    public static void main(String[] args) {

        // a.单独使用：
        int num = 10;
        ++num;
        System.out.println(num); // 11
        num++;
        System.out.println(num); // 12

        // b.与赋值操作混合使用：
        int num1 = 40;
        int result1 = ++num1;  // 如果是前++，变量立刻加1，然后再参与赋值运算
        System.out.println(result1); // 41
        System.out.println(num1);    // 41

        int num2 = 40;
        int result2 = num2++;  // 如果是后++，首先使用变量本来的40参与赋值运算，然后再让变量+1
        System.out.println(result2); // 40
        System.out.println(num2);    // 41

    }
}
