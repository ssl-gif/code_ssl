
/*

    在继承关系中，当子类的成员方法和父类的成员方法名称一样，参数列表也一样时，称为子类对父类成员方法的覆盖重写（Override）。
由此可见，方法的覆盖重写是"父、子类成员方法重名"的一种特殊情况，即父子类重名的成员方法不一定能构成方法的覆盖重写，但是能构成
覆盖重写的一定是父子类重名的成员方法。因此覆盖重写的方法也符合"重名的成员方法的使用规则"。

1.构成方法覆盖重写的条件：

(1).必须保证父子类之间方法的名称相同，参数列表也相同。

(2).子类方法的返回值必须小于等于父类方法的返回值范围。
java.lang.Object类是所有类的公共最高父类，java.lang.String类就是Object的子类。

(3).子类方法的权限修饰符必须大于等于父类方法的权限修饰符。权限修饰符的权限大小关系如下：
public > protected > (default) > private        (default)不是关键字default，而是什么都不写，留空

@Override：写在方法前面，用来检测是不是有效的正确的覆盖重写。

2.对方法覆盖重写的理解：
    在子类中，对继承过来的父类方法进行覆盖重写时，无论是在子类当中，还是其它类中，都优先使用子类的方法。此时就相当于是
"从父类继承过来且被覆盖重写的方法"，被子类方法覆盖、遮掩住了，然后子类再来添加更多自己的内容。
    (可看成是子类中已经不存在"从父类继承过来且被覆盖重写的方法"了，被子类方法替换掉了)

 */

package Extends.MethodOverride;

public class DemoOverride {
}
