
/*

    我们说多态是，同一行为在不同子类的对象上有多种不同的表现形式。那么该如何在代码中体现这一
特性呢？首先由继承extends、接口实现implements产生的父子类关系是实现多态的前提。其实在代码中
体现多态，就是一句话：父类引用指向子类对象。

        父类名称 对象名 = new 子类名称();   接口名称 对象名 = new 实现类名称();

    当我们使用多态的方式调用成员方法时：首先检查父类中是否有该方法。如果没有，则编译错误；如果有，
那么再检查子类是否覆盖重写了该方法，如果子类覆盖覆盖重写了该方法，则执行的是子类重写后方法，否则
就执行父类方法。
    由此可以看出，我们只使用父类引用，不需要创建各个子类对象，就可以展现出同一行为在不同子类的各
种不同表现，而且此时也不用关心子类是如何实现的，只需要在父类中调用方法就行了。由此就可实现"多态"
这一特性。

#.注意事项：
(1).成员变量
(2).重名但不是重写的方法
(3).


 */

package Polymorphic.PolymorphicUsages;

public class DemoMain {
    public static void main(String[] args) {

        Animal one = new Cat();
        one.eat();

        Animal two = new Dog();
        two.eat();

    }
}

